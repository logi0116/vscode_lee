package my;

import java.util.Scanner;

/**
 * 자동차 관리 기능 클래스 - "자동차 관리 전문가"
 * 사고의 흐름: "자동차 관리에 필요한 모든 기능들을 여기에 모아두자"
 * 세부 사고: "CRUD 기능, 검색 기능, 더미 데이터 기능을 한 클래스에 모으면 관리하기 편할 것 같아"
 * 세부 사고: "각 기능별로 섹션을 나누어서 코드를 정리하자"
 * 세부 사고: "사용자 친화적인 메시지와 함께 안전한 입력 처리를 하자"
 */
public class CarService {
    
    // ===================================================================
    // 1. 데이터 저장소 (Data Storage) - "자동차 주차장"
    // ===================================================================
    
    /** 1-1. 자동차 정보 저장 배열들 - "주차 공간들" */
    // 사고의 흐름: "자동차 정보를 여러 개 저장해야 하니까 배열을 사용하자"
    // 세부 사고: "Car 타입의 배열을 만들어서 자동차 객체들을 저장하자"
    // 세부 사고: "100대 정도면 충분할 것 같으니까 크기를 100으로 설정하자"
    // 세부 사고: "private으로 선언해서 외부에서 직접 접근하지 못하게 보호하자"
    private Car[] cars = new Car[100];                    // 자동차 보관소
    
    // 세부 사고: "현재 등록된 자동차 수를 추적하는 변수가 필요해"
    // 세부 사고: "0부터 시작해서 자동차가 추가될 때마다 1씩 증가시키자"
    // 세부 사고: "이 변수로 배열의 어디까지 데이터가 있는지 알 수 있어"
    private int carCount = 0;                             // 현재 등록된 자동차 수
    
    // 세부 사고: "사용자 입력을 받기 위한 Scanner 객체가 필요해"
    // 세부 사고: "System.in을 매개변수로 해서 키보드 입력을 받을 수 있게 하자"
    // 세부 사고: "클래스 전체에서 사용할 거니까 멤버 변수로 선언하자"
    private Scanner scanner = new Scanner(System.in);     // 입력 도구
    
    // ===================================================================
    // 2. CRUD 기능들 (Create, Read, Update, Delete) - "자동차 관리 업무"
    // ===================================================================
    
    /**
     * 2-1. 자동차 추가 (Create) - "신차 등록 접수원"
     * 사고의 흐름: "새로운 자동차 정보를 입력받아서 시스템에 등록하자"
     * 세부 사고: "먼저 제목을 출력해서 사용자가 무엇을 하고 있는지 알게 하자"
     * 세부 사고: "배열 공간이 충분한지 확인한 후에 입력을 받자"
     * 세부 사고: "입력받은 정보로 Car 객체를 생성해서 배열에 저장하자"
     */
    public void addCar() {
        // 세부 사고: "줄바꿈을 먼저 해서 이전 내용과 구분하자"
        // 세부 사고: "새 자동차 등록이라는 제목으로 사용자에게 현재 상황을 알려주자"
        System.out.println("\n새 자동차 등록");
        
        // 세부 사고: "=을 30개 반복해서 구분선을 만들어 시각적 효과를 주자"
        System.out.println("=".repeat(30));
        
        // 사고의 흐름: "배열이 가득 찼는지 먼저 확인하자"
        // 세부 사고: "carCount가 배열 길이보다 크거나 같으면 더 이상 저장할 공간이 없어"
        // 세부 사고: ">= 연산자로 비교해서 배열이 가득 찬 상황을 체크하자"
        if (carCount >= cars.length) {
            // 세부 사고: "사용자에게 친절하게 상황을 설명해주자"
            // 세부 사고: "주차장 만차라는 비유를 사용해서 이해하기 쉽게 하자"
            System.out.println("더 이상 자동차를 등록할 수 없습니다. (주차장 만차)");
            
            // 세부 사고: "더 이상 진행할 수 없으니까 return으로 메서드를 종료하자"
            return;
        }
        
        // 사고의 흐름: "사용자에게 친절하게 안내하면서 정보를 하나씩 입력받자"
        // 세부 사고: "자동차명부터 입력받자. 명확한 안내 메시지를 출력하고"
        // 세부 사고: "nextLine()을 사용해서 한 줄 전체를 문자열로 입력받자"
        System.out.print("자동차명을 입력하세요: ");
        String carName = scanner.nextLine();
        
        // 세부 사고: "제조사 정보도 같은 방식으로 입력받자"
        // 세부 사고: "현대, 기아, 삼성 같은 회사명을 입력받을 거야"
        System.out.print("제조사를 입력하세요: ");
        String manufacturer = scanner.nextLine();
        
        // 세부 사고: "연식은 숫자니까 getIntInput() 메서드를 사용하자"
        // 세부 사고: "이 메서드는 숫자가 아닌 입력에 대한 예외 처리를 해줄 거야"
        System.out.print("연식을 입력하세요: ");
        int year = getIntInput();
        
        // 세부 사고: "등록일은 날짜 형식의 문자열로 입력받자"
        // 세부 사고: "예시를 보여줘서 사용자가 어떤 형식으로 입력해야 하는지 알게 하자"
        System.out.print("등록일을 입력하세요 (예: 2024-01-15): ");
        String registDate = scanner.nextLine();
        
        // 사고의 흐름: "입력받은 정보로 Car 객체를 만들고 배열에 저장하자"
        // 세부 사고: "Car 생성자에 입력받은 4개의 정보를 매개변수로 전달하자"
        Car newCar = new Car(carName, manufacturer, year, registDate);
        
        // 세부 사고: "cars 배열의 carCount 위치에 새로운 Car 객체를 저장하자"
        // 세부 사고: "carCount는 현재 저장된 자동차 수이면서 동시에 다음 저장 위치의 인덱스야"
        cars[carCount] = newCar;
        
        // 세부 사고: "자동차를 하나 추가했으니까 carCount를 1 증가시키자"
        carCount++;
        
        // 세부 사고: "등록이 완료되었다는 메시지를 출력해서 사용자에게 알려주자"
        System.out.println("자동차 등록이 완료되었습니다!");
        
        // 세부 사고: "등록된 자동차의 정보를 보여줘서 확인할 수 있게 하자"
        // 세부 사고: "Car 클래스의 showInfo() 메서드를 호출하면 예쁘게 출력될 거야"
        newCar.showInfo();
    }
    
    /**
     * 2-2. 전체 자동차 조회 (Read All) - "주차장 전체 점검"
     * 사고의 흐름: "등록된 모든 자동차의 정보를 한눈에 볼 수 있게 정리해서 보여주자"
     * 세부 사고: "먼저 제목을 출력해서 사용자가 무엇을 보고 있는지 알 수 있게 하자"
     * 세부 사고: "현재 등록된 자동차 수도 함께 보여주면 더 친절할 것 같아"
     */
    public void viewAllCars() {
        // 세부 사고: "줄바꿈을 먼저 해서 이전 내용과 구분하자"
        // 세부 사고: "제목에 현재 자동차 수를 포함해서 정보를 더 풍부하게 하자"
        // 세부 사고: "carCount 변수를 사용해서 몇 대인지 보여주자"
        System.out.println("\n전체 자동차 목록 (" + carCount + "대)");
        
        // 세부 사고: "구분선을 그어서 제목과 내용을 시각적으로 분리하자"
        // 세부 사고: "=을 60개 반복해서 충분히 긴 구분선을 만들자"
        System.out.println("=".repeat(60));
        
        // 사고의 흐름: "자동차가 없으면 없다고 알려주자"
        // 세부 사고: "먼저 자동차가 없을 경우를 가정해야 하니까 if를 사용하자"
        // 세부 사고: "carCount가 0이면 등록된 자동차가 없다는 뜻이야"
        // 세부 사고: "== 연산자로 carCount와 0을 비교해서 같은지 확인하자"
        if (carCount == 0) {
            // 세부 사고: "사용자에게 친절하게 상황을 알려주자"
            // 세부 사고: "등록된 자동차가 없습니다라고 명확하게 메시지를 출력하자"
            System.out.println("등록된 자동차가 없습니다.");
            
            // 세부 사고: "더 이상 할 일이 없으니까 return으로 메서드를 종료하자"
            // 세부 사고: "return을 사용하면 이 지점에서 메서드 실행이 끝나고 호출한 곳으로 돌아가"
            return;
        }
        
        // 사고의 흐름: "반복문을 사용해서 모든 자동차 정보를 하나씩 출력하자"
        // 세부 사고: "for문을 사용해서 0부터 carCount-1까지 반복하자"
        // 세부 사고: "i는 배열의 인덱스 역할을 할 거야"
        // 세부 사고: "i < carCount 조건으로 등록된 자동차 수만큼만 반복하자"
        for (int i = 0; i < carCount; i++) {
            // 세부 사고: "번호를 매겨서 출력하면 사용자가 보기 편할 것 같아"
            // 세부 사고: "i는 0부터 시작하니까 i+1을 해서 1번부터 시작하게 하자"
            // 세부 사고: "printf를 사용해서 숫자 다음에 점과 공백을 넣자"
            System.out.printf("%d. ", (i + 1));
            
            // 세부 사고: "cars 배열의 i번째 자동차 객체를 가져오자"
            // 세부 사고: "그 객체의 showInfo() 메서드를 호출해서 정보를 출력하자"
            // 세부 사고: "showInfo()는 Car 클래스에서 만든 메서드니까 자동차 정보가 예쁘게 출력될 거야"
            cars[i].showInfo();
        }
    }
    
       /**
     * 2-3. 자동차 수정 (Update) - "차량 정보 변경 담당자"
     * 사고의 흐름: "기존 자동차의 정보를 찾아서 새로운 정보로 업데이트하자"
     * 세부 사고: "먼저 수정할 자동차가 있는지 확인하자"
     * 세부 사고: "자동차명으로 검색해서 해당 자동차를 찾자"
     * 세부 사고: "현재 정보를 보여준 후 수정 메뉴를 제공하자"
     */
    public void updateCar() {
        // 세부 사고: "제목을 출력해서 현재 어떤 작업을 하고 있는지 알려주자"
        System.out.println("\n자동차 정보 수정");
        
        // 세부 사고: "구분선으로 시각적 효과를 주자"
        System.out.println("=".repeat(30));
        
        // 세부 사고: "수정할 자동차가 없으면 미리 알려주고 종료하자"
        // 세부 사고: "carCount가 0이면 등록된 자동차가 없다는 뜻이야"
        if (carCount == 0) {
            // 세부 사고: "수정할 대상이 없다는 것을 명확하게 알려주자"
            System.out.println("수정할 자동차가 없습니다.");
            return;
        }
        
        // 사고의 흐름: "자동차명으로 수정할 차량을 찾자"
        // 세부 사고: "사용자에게 어떤 자동차를 수정할지 입력받자"
        System.out.print("수정할 자동차명을 입력하세요: ");
        String targetName = scanner.nextLine();
        
        // 세부 사고: "findCarByName() 메서드를 호출해서 해당 자동차의 인덱스를 찾자"
        // 세부 사고: "이 메서드는 찾으면 인덱스를, 못 찾으면 -1을 반환할 거야"
        int carIndex = findCarByName(targetName);
        
        // 세부 사고: "-1이 반환되면 해당 자동차를 찾지 못했다는 뜻이야"
        if (carIndex == -1) {
            System.out.println("해당 자동차를 찾을 수 없습니다.");
            return;
        }
        
        // 사고의 흐름: "수정하기 전에 현재 정보를 보여주자"
        // 세부 사고: "사용자가 어떤 자동차를 수정하는지 확인할 수 있게 하자"
        System.out.println("\n현재 자동차 정보:");
        cars[carIndex].showInfo();
        
        // 세부 사고: "수정 메뉴를 보여주는 별도 메서드를 호출하자"
        // 세부 사고: "찾은 자동차의 인덱스를 매개변수로 전달하자"
        showUpdateMenu(carIndex);
    }
    
    /**
     * 2-4. 자동차 삭제 (Delete) - "차량 말소 담당자"
     * 사고의 흐름: "지정된 자동차를 시스템에서 완전히 제거하자"
     * 세부 사고: "삭제할 자동차가 있는지 먼저 확인하자"
     * 세부 사고: "자동차명으로 검색해서 해당 자동차를 찾자"
     * 세부 사고: "삭제하기 전에 확인받아서 실수를 방지하자"
     */
    public void deleteCar() {
        // 세부 사고: "삭제 작업임을 명확하게 제목으로 표시하자"
        System.out.println("\n자동차 삭제");
        System.out.println("=".repeat(20));
        
        // 세부 사고: "삭제할 자동차가 없으면 미리 알려주고 종료하자"
        if (carCount == 0) {
            System.out.println("삭제할 자동차가 없습니다.");
            return;
        }
        
        // 사고의 흐름: "자동차명으로 삭제할 차량을 찾자"
        // 세부 사고: "사용자에게 어떤 자동차를 삭제할지 입력받자"
        System.out.print("삭제할 자동차명을 입력하세요: ");
        String targetName = scanner.nextLine();
        
        // 세부 사고: "findCarByName() 메서드로 해당 자동차를 찾자"
        int carIndex = findCarByName(targetName);
        
        // 세부 사고: "찾지 못했으면 에러 메시지를 출력하고 종료하자"
        if (carIndex == -1) {
            System.out.println("해당 자동차를 찾을 수 없습니다.");
            return;
        }
        
        // 사고의 흐름: "삭제하기 전에 어떤 자동차인지 보여주고 정말 삭제할 건지 확인받자"
        // 세부 사고: "실수로 삭제하는 것을 방지하기 위해 확인 절차를 거치자"
        System.out.println("\n삭제할 자동차 정보:");
        cars[carIndex].showInfo();
        
        // 세부 사고: "y/n으로 사용자의 최종 의사를 확인하자"
        System.out.print("\n정말로 삭제하시겠습니까? (y/n): ");
        String confirm = scanner.nextLine();
        
        // 세부 사고: "대소문자 구분 없이 y나 yes면 삭제를 진행하자"
        // 세부 사고: "equalsIgnoreCase()를 사용해서 대소문자를 무시하고 비교하자"
        if (confirm.equalsIgnoreCase("y") || confirm.equalsIgnoreCase("yes")) {
            // 세부 사고: "removeCarFromArray() 메서드를 호출해서 실제 삭제 작업을 하자"
            removeCarFromArray(carIndex);
            System.out.println("자동차가 삭제되었습니다.");
        } else {
            // 세부 사고: "y나 yes가 아니면 삭제를 취소했다고 알려주자"
            System.out.println("삭제를 취소했습니다.");
        }
    }
    
    // ===================================================================
    // 3. 검색 기능들 (Search Functions) - "자동차 수사관"
    // ===================================================================
    
    /**
     * 3-1. 자동차 검색 메뉴 - "수사 본부"
     * 사고의 흐름: "여러 가지 방법으로 검색할 수 있게 하자"
     * 세부 사고: "자동차명, 제조사, 연식으로 검색할 수 있는 메뉴를 제공하자"
     * 세부 사고: "사용자가 선택한 검색 방법에 따라 해당 검색 함수를 호출하자"
     */
    public void searchCar() {
        // 세부 사고: "검색 기능임을 명확하게 제목으로 표시하자"
        System.out.println("\n자동차 검색");
        System.out.println("=".repeat(20));
        
        // 세부 사고: "검색 방법들을 번호와 함께 나열해서 선택하기 쉽게 하자"
        System.out.println("1. 자동차명으로 검색");
        System.out.println("2. 제조사로 검색");
        System.out.println("3. 연식으로 검색");
        
        // 세부 사고: "사용자에게 선택을 요청하자"
        System.out.print("검색 방법을 선택하세요: ");
        int searchType = getIntInput();
        
        // 사고의 흐름: "선택한 검색 방법에 따라 해당 검색 함수를 호출하자"
        // 세부 사고: "switch문을 사용해서 각 번호에 맞는 검색 메서드를 호출하자"
        switch (searchType) {
            case 1: 
                // 세부 사고: "1번을 선택하면 자동차명으로 검색하는 메서드를 호출하자"
                searchByName(); 
                break;         // 이름 수사관
            case 2: 
                // 세부 사고: "2번을 선택하면 제조사로 검색하는 메서드를 호출하자"
                searchByManufacturer(); 
                break; // 제조사 수사관
            case 3: 
                // 세부 사고: "3번을 선택하면 연식으로 검색하는 메서드를 호출하자"
                searchByYear(); 
                break;         // 연식 수사관
            default: 
                // 세부 사고: "1,2,3 이외의 번호를 입력하면 잘못된 선택이라고 알려주자"
                System.out.println("잘못된 선택입니다.");
        }
    }
    
    /**
     * 3-2. 자동차명으로 검색 - "차명 조회관"
     * 사고의 흐름: "입력받은 자동차명이 포함된 차량들을 모두 찾아서 보여주자"
     * 세부 사고: "완전히 일치하지 않아도 부분적으로 포함되면 검색되게 하자"
     * 세부 사고: "검색 결과가 있는지 추적해서 없으면 안내 메시지를 출력하자"
     */
    private void searchByName() {
        // 세부 사고: "사용자에게 검색할 자동차명을 입력받자"
        System.out.print("검색할 자동차명을 입력하세요: ");
        String searchName = scanner.nextLine();
        
        // 세부 사고: "검색 결과가 있는지 추적하는 변수를 만들자"
        // 세부 사고: "처음에는 false로 설정하고 찾으면 true로 바꾸자"
        boolean found = false;
        
        // 세부 사고: "검색 결과 제목을 출력하자"
        System.out.println("\n검색 결과:");
        
        // 세부 사고: "모든 자동차를 하나씩 확인해서 검색어가 포함된 것을 찾자"
        for (int i = 0; i < carCount; i++) {
            // 세부 사고: "contains() 메서드를 사용해서 자동차명에 검색어가 포함되는지 확인하자"
            // 세부 사고: "getCarName()으로 자동차명을 가져와서 검색어와 비교하자"
            if (cars[i].getCarName().contains(searchName)) {
                // 세부 사고: "처음 찾은 경우에만 found를 true로 바꾸자"
                if (!found) found = true;
                
                // 세부 사고: "번호를 매겨서 출력하자"
                System.out.printf("%d. ", (i + 1));
                
                // 세부 사고: "해당 자동차의 정보를 출력하자"
                cars[i].showInfo();
            }
        }
        
        // 세부 사고: "found가 여전히 false면 검색 결과가 없다는 뜻이야"
        if (!found) {
            System.out.println("해당 자동차명의 차량을 찾을 수 없습니다.");
        }
    }
    
    /**
     * 3-3. 제조사로 검색 - "브랜드 조회관"
     * 사고의 흐름: "특정 제조사의 모든 차량들을 찾아서 보여주자"
     * 세부 사고: "제조사명도 부분 검색이 가능하게 하자"
     * 세부 사고: "현대를 입력하면 현대 차량들이 모두 나오게 하자"
     */
    private void searchByManufacturer() {
        // 세부 사고: "검색할 제조사명을 입력받자"
        System.out.print("검색할 제조사를 입력하세요: ");
        String searchManufacturer = scanner.nextLine();
        
        // 세부 사고: "검색 결과 추적 변수"
        boolean found = false;
        
        // 세부 사고: "검색한 제조사명을 포함한 제목을 출력하자"
        System.out.println("\n" + searchManufacturer + " 차량 목록:");
        
        // 세부 사고: "모든 자동차를 확인해서 제조사가 일치하는 것을 찾자"
        for (int i = 0; i < carCount; i++) {
                       // 세부 사고: "getManufacturer()로 제조사를 가져와서 검색어와 비교하자"
            // 세부 사고: "contains()를 사용해서 부분 검색도 가능하게 하자"
            if (cars[i].getManufacturer().contains(searchManufacturer)) {
                // 세부 사고: "처음 찾은 경우 found를 true로 설정하자"
                if (!found) found = true;
                
                // 세부 사고: "순서 번호를 출력하자"
                System.out.printf("%d. ", (i + 1));
                
                // 세부 사고: "해당 자동차 정보를 출력하자"
                cars[i].showInfo();
            }
        }
        
        // 세부 사고: "검색 결과가 없으면 안내 메시지를 출력하자"
        if (!found) {
            System.out.println("해당 제조사의 차량을 찾을 수 없습니다.");
        }
    }
    
    /**
     * 3-4. 연식으로 검색 - "년도 조회관"
     * 사고의 흐름: "특정 연식의 차량들을 찾아서 보여주자"
     * 세부 사고: "연식은 숫자니까 정확히 일치하는 것만 검색하자"
     * 세부 사고: "2023년식을 입력하면 2023년식 차량들만 나오게 하자"
     */
    private void searchByYear() {
        // 세부 사고: "검색할 연식을 숫자로 입력받자"
        // 세부 사고: "getIntInput()을 사용해서 안전하게 정수를 입력받자"
        System.out.print("검색할 연식을 입력하세요: ");
        int searchYear = getIntInput();
        
        // 세부 사고: "검색 결과 추적 변수"
        boolean found = false;
        
        // 세부 사고: "검색한 연식을 포함한 제목을 출력하자"
        System.out.println("\n" + searchYear + "년식 차량 목록:");
        
        // 세부 사고: "모든 자동차를 확인해서 연식이 일치하는 것을 찾자"
        for (int i = 0; i < carCount; i++) {
            // 세부 사고: "getYear()로 연식을 가져와서 검색 연식과 비교하자"
            // 세부 사고: "== 연산자로 정확히 일치하는지 확인하자"
            if (cars[i].getYear() == searchYear) {
                // 세부 사고: "처음 찾은 경우 found를 true로 설정하자"
                if (!found) found = true;
                
                // 세부 사고: "순서 번호를 출력하자"
                System.out.printf("%d. ", (i + 1));
                
                // 세부 사고: "해당 자동차 정보를 출력하자"
                cars[i].showInfo();
            }
        }
        
        // 세부 사고: "검색 결과가 없으면 안내 메시지를 출력하자"
        if (!found) {
            System.out.println("해당 연식의 차량을 찾을 수 없습니다.");
        }
    }
    
    // ===================================================================
    // 4. 더미 데이터 기능 (Sample Data) - "테스트용 차량 등록기"
    // ===================================================================
    
    /**
     * 4-1. 더미 데이터 추가 - "샘플 차량 일괄 등록"
     * 사고의 흐름: "테스트할 수 있게 미리 여러 대의 자동차 정보를 넣어두자"
     * 세부 사고: "다양한 제조사와 연식의 자동차들을 만들어서 모든 기능을 테스트할 수 있게 하자"
     * 세부 사고: "배열로 미리 만들어둔 자동차 정보들을 cars 배열에 복사하자"
     */
    public void addDummyData() {
        // 세부 사고: "더미 데이터 추가 작업임을 제목으로 표시하자"
        System.out.println("\n더미 데이터 추가");
        System.out.println("=".repeat(25));
        
        // 사고의 흐름: "다양한 제조사와 연식의 자동차들을 만들어서 모든 기능을 테스트할 수 있게 하자"
        // 세부 사고: "Car 객체들을 배열로 미리 만들어두자"
        // 세부 사고: "현대, 기아, 삼성, 쌍용 등 다양한 제조사를 포함하자"
        // 세부 사고: "2020년부터 2023년까지 다양한 연식을 포함하자"
        Car[] dummyCars = {
            new Car("소나타", "현대", 2023, "2024-01-15"),
            new Car("아반떼", "현대", 2022, "2024-01-20"),
            new Car("K5", "기아", 2023, "2024-02-10"),
            new Car("스포티지", "기아", 2021, "2024-02-15"),
            new Car("SM6", "삼성", 2022, "2024-03-05"),
            new Car("QM6", "삼성", 2020, "2024-03-10"),
            new Car("코란도", "쌍용", 2021, "2024-04-01"),
            new Car("티볼리", "쌍용", 2023, "2024-04-05"),
            new Car("레이", "기아", 2022, "2024-05-12"),
            new Car("캐스퍼", "현대", 2023, "2024-05-20")
        };
        
        // 세부 사고: "실제로 추가된 자동차 수를 추적하는 변수를 만들자"
        int addedCount = 0;
        
        // 사고의 흐름: "배열 공간이 있는 만큼만 추가하자"
        // 세부 사고: "향상된 for문을 사용해서 dummyCars 배열의 모든 요소를 순회하자"
        for (Car dummyCar : dummyCars) {
            // 세부 사고: "cars 배열에 공간이 있는지 확인하자"
            // 세부 사고: "carCount가 배열 길이보다 작으면 아직 공간이 있다는 뜻이야"
            if (carCount < cars.length) {
                // 세부 사고: "현재 carCount 위치에 더미 자동차를 저장하자"
                cars[carCount] = dummyCar;
                
                // 세부 사고: "자동차를 하나 추가했으니까 carCount를 증가시키자"
                carCount++;
                
                // 세부 사고: "추가된 자동차 수도 증가시키자"
                addedCount++;
            } else {
                // 세부 사고: "배열이 가득 찼으면 더 이상 추가할 수 없으니까 반복을 중단하자"
                break; // 배열이 가득 찬 경우
            }
        }
        
        // 세부 사고: "몇 대의 더미 데이터가 추가되었는지 알려주자"
        System.out.println("더미 데이터 " + addedCount + "대가 추가되었습니다.");
        
        // 세부 사고: "현재 총 자동차 수도 함께 알려주자"
        System.out.println("현재 총 " + carCount + "대의 자동차가 등록되어 있습니다.");
    }
    
    // ===================================================================
    // 6. 내부 도우미 메서드들 (Helper Methods) - "도구 창고"
    // ===================================================================
    
    /**
     * 6-1. 수정 메뉴 표시 - "수정 옵션 안내소"
     * 사고의 흐름: "어떤 정보를 수정할지 선택할 수 있게 메뉴를 보여주자"
     * 세부 사고: "자동차명, 제조사, 연식, 등록일을 각각 수정할 수 있게 하자"
     * 세부 사고: "수정을 취소할 수 있는 옵션도 제공하자"
     */
    private void showUpdateMenu(int carIndex) {
        // 세부 사고: "수정할 항목들을 번호와 함께 나열하자"
        System.out.println("\n수정할 항목을 선택하세요:");
        System.out.println("1. 자동차명 수정");
        System.out.println("2. 제조사 수정");
        System.out.println("3. 연식 수정");
        System.out.println("4. 등록일 수정");
        System.out.println("0. 수정 취소");
        
        // 세부 사고: "사용자의 선택을 입력받자"
        System.out.print("선택: ");
        int choice = getIntInput();
        
        // 세부 사고: "선택한 번호와 자동차 인덱스를 수정 실행 메서드에 전달하자"
        executeUpdate(carIndex, choice);
    }
    
    /**
     * 6-2. 수정 작업 실행 - "실제 수정 작업자"
     * 사고의 흐름: "선택한 항목에 따라서 해당 정보를 새로 입력받아서 업데이트하자"
     * 세부 사고: "각 선택에 맞는 setter 메서드를 호출해서 정보를 변경하자"
     * 세부 사고: "수정 후에는 변경된 정보를 보여주자"
     */
    private void executeUpdate(int carIndex, int choice) {
        // 세부 사고: "수정할 자동차 객체를 변수에 저장해서 사용하기 편하게 하자"
        Car car = cars[carIndex];
        
        // 세부 사고: "switch문으로 선택한 항목에 따라 다른 작업을 수행하자"
        switch (choice) {
            case 1: // 자동차명 수정 담당자
                // 세부 사고: "새로운 자동차명을 입력받자"
                System.out.print("새로운 자동차명을 입력하세요: ");
                
                // 세부 사고: "입력받은 값을 setCarName() 메서드로 설정하자"
                car.setCarName(scanner.nextLine());
                
                // 세부 사고: "수정 완료 메시지를 출력하자"
                System.out.println("자동차명이 수정되었습니다.");
                break;
            
            case 2: // 제조사 수정 담당자
                // 세부 사고: "새로운 제조사를 입력받자"
                System.out.print("새로운 제조사를 입력하세요: ");
                
                // 세부 사고: "setManufacturer() 메서드로 제조사를 변경하자"
                car.setManufacturer(scanner.nextLine());
                
                System.out.println("제조사가 수정되었습니다.");
                break;
            
            case 3: // 연식 수정 담당자
                // 세부 사고: "새로운 연식을 숫자로 입력받자"
                System.out.print("새로운 연식을 입력하세요: ");
                
                // 세부 사고: "getIntInput()으로 안전하게 정수를 입력받고 setYear()로 설정하자"
                car.setYear(getIntInput());
                
                System.out.println("연식이 수정되었습니다.");
                break;
            
            case 4: // 등록일 수정 담당자
                // 세부 사고: "새로운 등록일을 입력받자"
                System.out.print("새로운 등록일을 입력하세요 (예: 2024-01-15): ");
                
                // 세부 사고: "setRegistDate() 메서드로 등록일을 변경하자"
                car.setRegistDate(scanner.nextLine());
                
                System.out.println("등록일이 수정되었습니다.");
                break;
            
            case 0: // 취소 담당자
                // 세부 사고: "0을 선택하면 수정을 취소한다고 알려주자"
                System.out.println("수정을 취소했습니다.");
                break;
            
            default:
                // 세부 사고: "0~4 이외의 번호를 입력하면 잘못된 선택이라고 알려주자"
                System.out.println("잘못된 선택입니다.");
        }
        
        // 세부 사고: "실제로 수정이 이루어진 경우(1~4번 선택)에만 수정된 정보를 보여주자"
        if (choice >= 1 && choice <= 4) {
            System.out.println("\n수정된 자동차 정보:");
            
            // 세부 사고: "Car 객체의 showInfo() 메서드로 변경된 정보를 출력하자"
            car.showInfo();
        }
    }
    
    /**
     * 6-3. 자동차명으로 찾기 - "차량 검색 도우미"
     * 사고의 흐름: "자동차명으로 차량을 찾는 코드가 여러 곳에서 반복되니까 함수로 만들어서 재사용하자"
     * 세부 사고: "수정, 삭제 기능에서 모두 사용되는 공통 기능이야"
     * 세부 사고: "찾으면 인덱스를, 못 찾으면 -1을 반환하는 방식으로 하자"
     */
    private int findCarByName(String name) {
        // 세부 사고: "모든 자동차를 하나씩 확인해서 이름이 일치하는 것을 찾자"
        // 세부 사고: "for문으로 0부터 carCount-1까지 반복하자"
        for (int i = 0; i < carCount; i++) {
            // 세부 사고: "equals() 메서드로 정확히 일치하는지 확인하자"
            // 세부 사고: "getCarName()으로 자동차명을 가져와서 매개변수 name과 비교하자"
            if (cars[i].getCarName().equals(name)) {
                // 세부 사고: "일치하는 자동차를 찾으면 그 인덱스를 반환하자"
                return i; // 찾은 자동차의 인덱스 반환
            }
        }
        
        // 세부 사고: "for문이 끝날 때까지 찾지 못했으면 -1을 반환하자"
        // 세부 사고: "-1은 배열 인덱스로는 불가능한 값이니까 '못 찾음'을 의미하는 신호로 사용하자"
        return -1; // 찾지 못했을 때 -1 반환
    }
    
    /**
     * 6-4. 배열에서 자동차 제거 - "주차장 정리 담당자"
     * 사고의 흐름: "삭제된 자동차의 자리를 뒤의 자동차들로 채워서 빈 공간을 없애자"
     * 세부 사고: "배열에서 중간 요소를 삭제하면 뒤의 요소들을 앞으로 이동시켜야 해"
     * 세부 사고: "삭제 후에는 carCount를 1 감소시켜야 해"
     */
    private void removeCarFromArray(int index) {
        // 사고의 흐름: "삭제할 위치부터 마지막까지 한 칸씩 앞으로 이동시키자"
        // 세부 사고: "index 위치부터 carCount-2까지 반복하자"
        // 세부 사고: "carCount-1이 마지막 요소의 인덱스니까 carCount-2까지만 반복하면 돼"
        for (int i = index; i < carCount - 1; i++) {
            // 세부 사고: "i+1 위치의 자동차를 i 위치로 이동시키자"
            // 세부 사고: "이렇게 하면 삭제할 자동차가 덮어씌워져서 사라지고, 뒤의 자동차들이 앞으로 이동해"
            cars[i] = cars[i + 1];
        }
        
        // 세부 사고: "마지막 자리는 null로 비워주자"
        // 세부 사고: "carCount-1이 원래 마지막 자동차의 위치였는데, 이제 비어있으니까 null을 넣자"
        cars[carCount - 1] = null; // 마지막 자리 비우기
        
        // 세부 사고: "자동차를 하나 삭제했으니까 전체 자동차 수를 1 감소시키자"
        carCount--; // 전체 자동차 수 감소
    }
    
    /**
     * 6-5. 정수 입력 받기 - "숫자 입력 검증관"
     * 사고의 흐름: "사용자가 잘못된 형식을 입력할 수 있으니까 안전하게 정수를 입력받는 함수를 만들자"
     * 세부 사고: "숫자가 아닌 문자를 입력하면 NumberFormatException이 발생할 수 있어"
     * 세부 사고: "try-catch문으로 예외를 처리하고 다시 입력받게 하자"
     */
    private int getIntInput() {
        // 세부 사고: "올바른 정수를 입력받을 때까지 계속 반복하자"
        // 세부 사고: "while(true)로 무한 반복하고, 올바른 입력이 들어오면 return으로 빠져나가자"
        while (true) {
            try {
                // 세부 사고: "먼저 문자열로 입력을 받자"
                String input = scanner.nextLine();
                
                // 세부 사고: "Integer.parseInt()로 문자열을 정수로 변환하자"
                // 세부 사고: "변환이 성공하면 그 값을 반환하자"
                return Integer.parseInt(input);
            } catch (NumberFormatException e) {
                // 세부 사고: "NumberFormatException이 발생하면 숫자가 아닌 값을 입력했다는 뜻이야"
                // 세부 사고: "사용자에게 다시 입력하라고 친절하게 안내하자"
                System.out.print("올바른 숫자를 입력해주세요: ");
                
                // 세부 사고: "catch 블록이 끝나면 while문이 다시 반복되면서 입력을 다시 받을 거야"
            }
        }
    }
    
    /**
     * 6-6. 현재 자동차 수 반환 - "주차장 현황 확인"
     * 사고의 흐름: "외부에서 현재 등록된 자동차 수를 확인할 수 있게 하자"
     * 세부 사고: "carCount는 private이니까 외부에서 직접 접근할 수 없어"
     * 세부 사고: "getter 메서드를 만들어서 carCount 값을 반환하자"
     * 세부 사고: "메인 메뉴에서 현재 상태를 보여줄 때 사용할 수 있을 거야"
     */
    public int getCarCount() {
        // 세부 사고: "단순히 carCount 값을 반환하기만 하면 돼"
        // 세부 사고: "이 메서드를 통해서만 carCount에 접근할 수 있으니까 데이터가 보호돼"
        return carCount;
    }
}